spring.application.name=api-gateway
#api-gateway can integrate with eureka server. This property similar @EnableEurekaClient but for gateway service
spring.cloud.gateway.discovery.locator.enabled=true
#This config do the using uppercase not necessary
spring.cloud.gateway.discovery.locator.lower-case-service-id=true

#This config allow to send token throw the  all chain of microservices calls
spring.cloud.gateway.default-filters=TokenRelay

#Routing logic
spring.cloud.gateway.routes[0].id=product-service
#prefix lb was added for load balance of service
spring.cloud.gateway.routes[0].uri=lb://product-service
#If client do request to /api/product it will be redirected to teh product service
spring.cloud.gateway.routes[0].predicates[0]=Path=/api/product

#Give unique id for gateway service
eureka.instance.instance-id=${spring.application.name}:${random.uuid}

#Keycloak configs
spring.security.oauth2.client.provider.keycloak.issuer-uri=http://localhost:8180/auth/realms/microservice-project-realm
spring.security.oauth2.client.registration.spring-cloud-gateway-client.client-id=spring-cloud-gateway-client
spring.security.oauth2.client.registration.spring-cloud-gateway-client.client-secret=FMSqJaeYdW7HCV1KR3CpOIBGfZBArzHd
spring.security.oauth2.client.registration.spring-cloud-gateway-client.provider=keycloak
spring.security.oauth2.client.registration.spring-cloud-gateway-client.authorization-grant-type=authorization_code
#This value was copying from keycloak client page
spring.security.oauth2.client.registration.spring-cloud-gateway-client.redirect-uri=http://localhost:8080/login/oauth2/code/spring-cloud-gateway-client

